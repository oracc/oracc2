namespace g = "http://oracc.org/ns/gdl/1.0"
namespace n = "http://oracc.org/ns/norm/1.0"
namespace sl = "http://oracc.org/ns/sl/1.0"

start =
  element sl:signlist {
    attribute project { text } ,
    attribute signlist { text } ,
    sl.notes ,
    sl.listdef* ,
    sl.sysdef* ,
    sl.iheader* ,
    element sl:letter {
      attribute name { text },
      attribute title { text },
      attribute xml:id { xsd:NCName },
      attribute num { xsd:string { pattern="[01]" } }?,
      (sl.tle*
      |
      element sl:signs {
        attribute name { text },
        attribute title { text },
	sl.tle*
      }*)
    }*,
    sl.homophones?
  }

# Top-level-elements (i.e., top-level below grouping constructs)
sl.tle     = (sl.formproxy | sl.lref | sl.sign | sl.sref)

sl.formproxy =
  element sl:formproxy {
    attribute n { text },
    attribute sort { text }, 
    attribute xml:id { xsd:NCName }?,
    sl.name?
  }

sl.lref =
  element sl:lref {
    attribute n { text },
    attribute sort { text }, 
    attribute xml:id { xsd:NCName }?,
    sl.name?,
    (sl.inote | sl.lit | sl.note)*
  }


sl.sref =
  element sl:sref {
    attribute n { text },
    attribute sort { text }, 
    attribute xml:id { xsd:NCName }?,
    sl.name?
  }

sl.sign    =
  element sl:sign {
    attribute deprecated { xsd:integer }?,
    attribute n { text },
    attribute sort { text }, 
    attribute xml:id { xsd:NCName }?,
    sl.smap?,
    attribute compoundonly { "yes"|"no" }?,
    attribute cpd-refs { xsd:IDREFS }?,
    (sl.moid | sl.merge)?,
    sl.stats?,
    sl.name?,
    sl.aka*,
    (sl.inote
     | sl.list
     | sl.lit
     | sl.note
     | sl.pname
     | sl.uname
     | sl.uage
     | sl.ucun
     | element sl:unote { text })*,
    sl.v*,
    sl.sys*,
    sl.images?,
    sl.cpds?,
    sl.form*,
    element sl:qs {
      element sl:q {
        attribute base { text }?,
        attribute o { xsd:NCName },
        attribute p { xsd:NCName }?,
        attribute qm { text }?,
        attribute qv { text },
        attribute type { xsd:NCName }?
      }+
    }?
  }

sl.form	   = element sl:form {
      attribute n { text },
      attribute ref { xsd:NCName }?,
      attribute sort { text }, 
      attribute xml:id { xsd:NCName }?,
      attribute compoundonly { "yes"|"no" }?,
      attribute cpd-refs { xsd:IDREFS }?,
      sl.stats?,
      sl.name?,
      sl.aka*,
      (sl.proof
       | (sl.inote
          | sl.list
          | sl.lit
          | sl.note
          | sl.pname
	  | sl.sys
          | sl.uname
          | sl.uage
          | sl.ucun)*),
      sl.v*,
      sl.sys*,
      sl.images?,
      element sl:inherited {
        element sl:iv {
          attribute sort { text }, 
          attribute n { text }
        }+
      }?
    }

sl.aka	   = element sl:aka { attribute n { text } , sl.name? }

sl.moid     = attribute moid { xsd:IDREF }
sl.merge    = attribute merge { xsd:IDREFS }

sl.notes   = (sl.inote | sl.lit | sl.note)*

sl.listdef = element sl:listdef { attribute name { xsd:NCName | "U+" } , element sl:info { text }? , sl.notes }

sl.sysdef  = element sl:sysdef { attribute name { xsd:NCName } , element sl:info { text }? , sl.notes }

sl.sys 	   = element sl:sys { attribute name { xsd:NCName } ,
	     	     	      attribute subname { text }? ,
	     	     	      attribute token { text } ,
			      text }

sl.iheader = element sl:iheader { attribute xml:id { xsd:NCName } ,
	     	     		  attribute label { text } ,
	     	     		  attribute order { xsd:string { pattern="[0-9]+" } } ,
	     	     		  attribute proj { text } ,
	     	     		  attribute path { text } ,
	     	     		  attribute thumb { text }? ,
				  attribute period { text }? }

sl.images = element sl:images {
            	    element sl:i { (attribute ref { xsd:NCName } , attribute loc { text })? }*
      	    }

sl.stats = (attribute icnt { xsd:decimal } , attribute ipct { xsd:decimal }?, attribute ctotal { xsd:decimal }?)

sl.cpds = element sl:cpds {
	  	  sl.stats?,
	  	  element sl:memb { attribute oids { xsd:IDREFS } , sl.stats? }?,
		  element sl:init { attribute oids { xsd:IDREFS } , sl.stats? }?,
		  element sl:medl { attribute oids { xsd:IDREFS } , sl.stats? }?,
		  element sl:finl { attribute oids { xsd:IDREFS } , sl.stats? }?,
		  element sl:ctnr { attribute oids { xsd:IDREFS } , sl.stats? }?,
		  element sl:ctnd { attribute oids { xsd:IDREFS } , sl.stats? }?
	}

sl.smap    = element sl:smap { attribute oid { xsd:NCName } , text }

sl.name =
  element sl:name {
    (text
     | element g:nonw {
         attribute type { xsd:NCName },
         attribute xml:lang { xsd:NCName },
         element g:p {
           attribute g:status { xsd:NCName },
           attribute g:type { text },
           attribute g:utf8 { text }
         }
       }
     | element g:w {
         attribute form { text },
         attribute xml:lang { xsd:NCName },
         (g.t | g.g | g.s | element g:p { text })?,
         g.d?,
         (g.c | g.n)?,
         element g:q {
           attribute form { text },
           attribute g:delim { xsd:NMTOKEN }?,
           attribute g:status { xsd:NCName }?,
           attribute g:utf8 { text }?,
           g.v,
           g.s
         }?,
         g.v*
       }
     | element n:w {
         attribute form { xsd:NCName },
         attribute g:delim { text }?,
         attribute xml:lang { xsd:NCName },
         element n:s {
           attribute g:delim { xsd:NMTOKEN }?,
           xsd:NCName
         }+,
         g.d?
       })+
  }
sl.ucun =
  element sl:ucun {
    attribute hex { text } ,
    text
  }
sl.inote = element sl:inote { text }
sl.uage = element sl:uage { text }
sl.uname = element sl:uname { text }
sl.note = element sl:note { text }
sl.lit = element sl:lit { text }
sl.list =
  element sl:list {
    attribute n { text },
    attribute sort { text } 
  }
sl.pname =
  element sl:pname {
    attribute n { text }
  }
sl.v =
  element sl:v {
    attribute comment { xsd:NCName }?,
    attribute deprecated { xsd:NCName }?,
    attribute n { text },
    attribute sort { text }, 
    attribute type { xsd:NCName }?,
    attribute uncertain { xsd:NCName }?,
    attribute xml:lang { text }?,
    attribute hid { text }?,
    sl.stats?,
    sl.name?,
    sl.proof?,
    sl.lemmas?,
    (sl.inote | sl.lit | sl.note)*
  }

# potentially deprecated
sl.proof = element sl:proof { text }

sl.lemmas = element sl:lemmas { sl.lemma* }
sl.lemma  = element sl:lemma  {
	  attribute n { text } ,
	  attribute oid { text } ,
	  attribute lcnt { text } ,
	  attribute base { text } ,
	  attribute bcnt { text } ,
	  attribute gpos { text } 
	  }

sl.homophones = element sl:homophones { sl.base* }
sl.base = element sl:base {
    attribute xml:id { xsd:NCName }?,
    attribute n { text },
    attribute count { text },
    sl.h*
}
sl.h = element sl:h {
     attribute oid { text },
     attribute v { text }
}

g.d =
  element g:d {
    attribute g:pos { xsd:NCName },
    attribute g:role { xsd:NCName },
    (g.g | g.v)
  }
g.g =
  element g:g {
    implicit?,
    attribute g:type { xsd:NCName }?,
    ( g.s | g.n )+
  }
g.s =
  element g:s {
    attribute form { text }?,
    attribute g:accented { text }?,
    attribute g:delim { text }?,
    attribute g:logolang { xsd:NCName }?,
    attribute g:role { xsd:NCName }?,
    attribute g:status { xsd:NCName }?,
    attribute g:utf8 { text }?,
    (text | (g.b , mods+))
  }
g.n =
  element g:n {
  (
    (attribute form { "n" | "N" })
  |
    (attribute form { text },
    attribute sexified { text }?,
    attribute g:status { xsd:NCName }?,
    attribute g:utf8 { text }?,
    element g:r { attribute form { text }? , text },
    (g.s | g.v)?,
    mods*,
    (g.c | mods)?,
    mods*)
  )
  }
g.c =
  element g:c {
    attribute form { text },
    attribute g:status { xsd:NCName }?,
    attribute g:utf8 { text }?,
    (mods
     | g.n
     | g.o
     | g.s
     | g.g.c)+ ,
    mods*
  }

g.g.c = element g:g { implicit? , ctype?, ((g.g.c , (mods)*) | g.o | g.n | g.s)+ }

ctype = attribute g:type { "c" }

g.v =
  element g:v {
    attribute form { text }?,
    attribute g:accented { xsd:NCName }?,
    attribute g:delim { xsd:NMTOKEN }?,
    attribute g:status { xsd:NCName }?,
    attribute g:utf8 { text }?,
    (text | (g.b , mods+))
  }
mods     = modifier | allograph

modifier = element g:m { xsd:string { pattern = "[a-z]|[0-9]{1,3}" } }

allograph= element g:a { xsd:string { pattern = "[a-wyz0-9]+" } 
			| xsd:string { pattern = "[\+\-]" } }

g.b = element g:b { text }
g.o =
  element g:o {
    attribute g:type { xsd:NCName },
    text
  }

implicit = attribute implicit { "1" }

# This is a new addition for printing the text value of GDL literals
g.t = element g:t { text }
