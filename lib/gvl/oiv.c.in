#include <oraccsys.h>
#include <gvl.h>

#if 0
static Hash *oiv_osl(Hash *wants);
#endif

static Memo *oivmem = NULL;

void
oiv_init(void)
{
  if (!oivmem)
    oivmem = memo_init(sizeof(struct oiv_data), 32);
}
void
oiv_term(void)
{
  if (oivmem)
    {
      memo_term(oivmem);
      oivmem = NULL;
    }
}

const char *
oiv_style_to_file(const char *style)
{
  return "@@ORACC_BUILDS@@/osl/02pub/gudea.oss";
}

/* Load a selections file, a list of OIV identifiers, and extract the
 * OIV data from the OSL IVS into a hash. Return the hash so it can
 * be used by GVL for character rendering.
 *
 * 2024-10-14: new implementation uses OpenType ligatures for ivs
 * support and CSS font-feature-select for web display.
 *
 * File format is now a tabbed file:
 *
 * 	CODE	SALT	OIVS
 *
 * CODE is U+ Unicode codepoint for character being rendered, e.g.,
 * U+12324 [DEâ‚‚] or an OSL @useq-style sequence, e.g., x12000.x12000
 *
 * SALT is CSS tag to select SALT#, e.g., salt1
 *
 * OIVS is UTF-8 encoded CODE+IVS sequence for use in non-web contexts
 * 
 */
Hash *
oiv_load(const char *oiv_selections_file)
{
  oiv_init();
  
  unsigned char **ll = loadfile_lines((uccp)oiv_selections_file, NULL);
  int i;
  Hash *hoiv = hash_create(128);
  for (i = 0; ll[i]; ++i)
    {
      char **f = tab_split((char*)ll[i]);
      struct oiv_data *oivm = memo_new(oivmem);
      oivm->code = f[0];
      if (f[1] && *f[1])
	oivm->sset = f[1];
      if (f[2] && *f[2])
	oivm->salt = f[2];
      if (f[3] && *f[3])
	oivm->oivs = f[3];
      hash_add(hoiv, (uccp)oivm->code, oivm);
    }
  return hoiv;
}

#if 0
Hash *
oiv_osl(Hash *wants)
{
  const char *osl_ivd = "@@ORACC_BUILDS@@/pub/osl/Oracc_OSL.txt";
  unsigned char **ll = loadfile_lines((uccp)osl_ivd, NULL);
  int i;
  Hash *ret = hash_create(128);
  for (i = 0; ll[i]; ++i)
    {
      if ('#' != *ll[i])
	{
	  char *data = (char*)ll[i];
	  char *ident = strchr(data, ';');
	  ++ident; ident = strchr(ident, ';');
	  ++ident;
	  char *e = ident;
	  while (*e && !isspace(*e))
	    ++e;
	  if (*e)
	    *e = '\0';
	  if (hash_find(wants, (uccp)ident))
	    hash_add(ret, (uccp)ident, data);
	}
    }
  return ret;
}
#endif
