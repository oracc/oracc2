#include <../dx.h>
#include <osh.h>

const char *progname = NULL;
int ssh_mode = 0;
int verbose = 0;

static void showargs(int argc, char **argv, Job *jp);

int
main(int argc, char **argv)
{
  char **optv = NULL;
  progname = argv[0];
  static Job j;

  setbuf(stdout, NULL);
  j.pid = getpid();

  showargs(argc, argv, &j);
  
  if ((optv = osh_options(argc, argv, &j)))
    {
      /* osh_project guarantees we are in a project directory where we
	 have permission to be */
      if (!strcmp(j.cmd1, "init") || !osh_project(optv, &j))
	{
	  /* osh_commands returns a pointer to static data; NULL
	     indicates an unknown command */
	  struct osh_info *oip = osh_commands(j.cmd1, strlen(j.cmd1));
	  if (oip)
	    {
	      if (verbose)
		fprintf(stderr, "%s: project=%s; initial command=%s\n", progname, j.project, j.cmd1);
	      if (oip->type == OSH_BUILTIN)
		{
		  if (!strcmp(oip->arg, "$log"))
		    oip->arg = osh_last_log(&j);

		  /* On success osh has been replaced by the builtin;
		     builtins all echo machine state data using, e.g.,
		     ls or printenv */
		  if (osh_exec(oip->cmd, oip->arg, &j))
		    goto error;
		}
	      else
		{
		  /* On success we have called the job-manager odo to complete the job */
		  if (osh_dcx(optv, &j))
		    goto error;

		  /* Wait for the job to complete (a future
		     implementation will support an asynchronous mode) */
		  if (osh_wait(&j))
		    goto error;
		  
		  /* Wrap-up--send the log file back to the caller and
		     possibly other actions */
		  if (osh_wrapup(&j))
		    goto error;
		}
	    }
	  else
	    {
	      fprintf(stderr, "%s: unknown command '%s'. Stop.\n", argv[0], j.cmd1);
	      goto error;
	    }
	}
    }
  else
    {
      fprintf(stderr, "%s: error parsing arguments. Stop.\n", argv[0]);
      goto error;
    }

  return 0;

 error:
  return 1;
}

static void
showargs(int argc, char **argv, Job *jp)
{
  int i = 0;
  printf("osh[%d]:", jp->pid);
  while (i < argc)
    printf(" %s", argv[i++]);
  printf("\n");
}
