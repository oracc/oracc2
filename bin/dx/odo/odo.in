#!/bin/dash
#
# odo executes programs that carry out Oracc commands.
# 
# The first argument is the directory in which to put the status file
# and any other outputs.  When called from osh/dx this is the tmpdir
# which has a session code; if odo is called directly (really only for
# testing) any directory can be used for this as long as it is
# writable. The special tmpdir '-' can be used in which case files are
# written to the environment TMPDIR or /tmp if TMPDIR is not set.
#
# The second argument is the project; if project is "." use oraccopt
# to find it from 00lib/config.xml
#
# The third argument is the base command to execute.
#
# For any command except 'init', odo looks for a script
# $user-COMMAND.sh; if not found, it looks for odo-COMMAND.sh. If
# neither of these scripts exists it is a bad command (which should be
# caught earlier by osh).
#
# The command script is then called with $user and $project as the
# first two arguments, and any additional arguments are also appended
# to the script invocation.
#

fail ()
{
    echo "$0: $1. Stop."
    set_status error
    exit 1;
}

set_status ()
{
    if [ "$tmpdir" != "" ]; then
	if [ -d $tmpdir ]; then
	    if [ "$V" = "-v" ]; then
		echo $0 writing status $1 to $tmpdir/status
	    fi
	    printf "$1" >$tmpdir/status;
	fi
    fi
}

exec 1>&2
bin=@@ORACC_BUILDS@@/bin

echo $0 called with arguments $*

if [ "$1" = "-v" ]; then
    shift
    V="-v"
fi

if [ $# -lt 3 ]; then
    fail "not enough arguments--need at least TMPDIR PROJECT COMMAND"
fi

tmpdir=$1
if [ "$tmpdir" = "-" ]; then
  if [ "$TMPDIR" != "" ]; then
    tmpdir=$TMPDIR
  else
    tmpdir=/tmp
  fi
fi
if [ ! -d $tmpdir ]; then
    fail "$tmpdir is not a directory"
fi

shift
project=$1
if [ "$project" = "." ]; then
    if [ -r 00lib/config.xml ]; then
	project=`oraccopt`
    else
	fail "you can only use 'odo .' in a project directory"
    fi
fi
if [ "$project" = "" ]; then
    fail "empty project argument"
else
    user=`/bin/echo -n $project | cut -d/ -f1`
fi

shift
command=$1
if [ "$command" = "" ]; then
    fail "empty command argument"
fi

shift
echo "$0: tmpdir=$tmpdir; user=$user; project=$project; command=$command"
if [ $command = "init" ]; then
    cd @@ORACC_BUILDS@@
    if [ ! -r $user ]; then
	$bin/odo-cvs-checkout.sh $user $*
	if [ $? != 0 ]; then
	    fail "odo-checkout.sh $user $*: command failed with code $?"
	else
	    set_status done
	fi
    else
	fail "$user already exists. Stop."
    fi
else
    projdir=@@ORACC_BUILDS@@/$project
    if [ -d $projdir ]; then
	(cd $projdir
	 . $bin/odo-environment.sh
	 $bin/odo-cvs-refresh.sh $user $*
	 $bin/odo-dir-links.sh $project $V
	 $bin/odo-config.sh $project $V
	 if [ $? -eq 0 ]; then
	     $bin/odo-update.sh $project $V
	     if [ $? -eq 0 ]; then
		 if [ "$command" != "config" ] && [ "$command" != "update" ]; then
		     uscript=$bin/${user}-${command}.sh
		     if [ -x $bin/$user-$command.sh ]; then
			 $uscript $user $project $*
		     else
			 script=$bin/odo-$command.sh
			 if [ -x $script ]; then
			     $script $user $project $*
			 else
			     fail "no command $uscript or $script"
			 fi
		     fi
		 fi
		 set_status done
	     else
		 fail "update command failed"
	     fi
	 else
	     fail "config command failed"
	 fi
	)
    else
	fail "unknown project $project.  Do you need to run odo $project init?"
    fi
fi
