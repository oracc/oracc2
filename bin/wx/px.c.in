#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype128.h>
#include <sys/stat.h>
#include "resolver.h"
#include "ccgi/ccgi.h"

const char *px_exe = "@@ORACC_BUILDS@@/bin/px";
const char *qx_exe = "@@ORACC_BUILDS@@/bin/qx";

extern void dump_vl(CGI_varlist *vl);

void
dump_vec(const char *porq, const char **vec)
{
  int i;
  fprintf(stderr, "wx calling %s", porq);
  for (i = 0; vec[i]; ++i)
    fprintf(stderr, " %s", vec[i]);
  fputc('\n', stderr);
}

const char *
px_cgi_arg(const char *arg, const char *val)
{
  char *c = malloc(strlen(arg)+strlen(val)+2);
  sprintf(c, "%s=%s", arg, CGI_encode_url(val, NULL));
  return c;
}

/* When this routine is called vl always has at least one member: project */
static char const**
px_mkvec(CGI_varlist *vl)
{
  const char *name;
  char const** vec;
  int i;

  for (i = 0, name = CGI_first_name(vl); name != 0; name = CGI_next_name(vl))
    ++i;
  
  vec = malloc((i+3) * sizeof(const char*));
  
  vec[0] = px_exe;
  vec[1] = px_cgi_arg("web","1");
  for (i = 2, name = CGI_first_name(vl); name != 0; name = CGI_next_name(vl), ++i)
    ((char const**)vec)[i] = px_cgi_arg(name,CGI_lookup(vl,name));
  ((char **)vec)[i] = NULL;
    
  return vec;
}

void
pxvl(CGI_varlist *v)
{
  if (!CGI_lookup(v, "project"))
    v = CGI_add_var(v, "project", project);
  
  const char **va = px_mkvec(v);
  
  if (CGI_lookup(v, "srch"))
    {
      dump_vec(qx_exe, va);
      execv(qx_exe, (char*const*)va);
    }
  else
    {
      dump_vec(px_exe, va);
      execv(px_exe, (char*const*)va);
    }

  fprintf(stderr, "execv %s failed\n", px_exe);
  exit(1);
}

void
pxv(const char **argv)
{
  argv[0] = px_exe;
  argv[1] = px_cgi_arg("web","1");
  execv(px_exe, (char*const*)argv);
  fprintf(stderr, "execv %s failed\n", px_exe);
  exit(1);
}

void
pxglossary(const char *project, const char *glos)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);
  v = CGI_add_var(v, "glos", glos);

  pxvl(v);
}

void
px(const char *project)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);

  pxvl(v);
}
