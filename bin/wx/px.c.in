#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype128.h>
#include <sys/stat.h>
#include "wx.h"
#include "ccgi/ccgi.h"

#include "px.h"

const char *
px_cgi_arg(const char *arg, const char *val)
{
  char *e = CGI_encode_url(val, NULL);
  char *c = malloc(strlen(arg)+strlen(e)+2);
  sprintf(c, "%s=%s", arg, e);
  return c;
}

/* When this routine is called vl always has at least one member: project */
static char const**
px_mkvec(CGI_varlist *vl)
{
  const char *name;
  char const** vec;
  int i;

  for (i = 0, name = CGI_first_name(vl); name != 0; name = CGI_next_name(vl))
    ++i;
  
  vec = malloc((i+3) * sizeof(const char*));
  
  vec[0] = PX_EXE;
  vec[1] = px_cgi_arg("web","1");
  for (i = 2, name = CGI_first_name(vl); name != 0; name = CGI_next_name(vl), ++i)
    ((char const**)vec)[i] = px_cgi_arg(name,CGI_lookup(vl,name));
  ((char **)vec)[i] = NULL;
    
  return vec;
}

void
pxvl(CGI_varlist *v)
{
  if (!CGI_lookup(v, "project"))
    v = CGI_add_var(v, "project", project);
  
  const char **va = px_mkvec(v);
  
  if (CGI_lookup(v, "q"))
    {
      dump_vec(QX_EXE, va);
      execv(QX_EXE, (char*const*)va);
    }
  else
    {
      dump_vec(PX_EXE, va);
      execv(PX_EXE, (char*const*)va);
    }

  fprintf(stderr, "execv %s failed\n", PX_EXE);
  exit(1);
}

void
pxv(const char **argv)
{
  argv[0] = PX_EXE;
  argv[1] = px_cgi_arg("web","1");
  execv(PX_EXE, (char*const*)argv);
  fprintf(stderr, "execv %s failed\n", PX_EXE);
  exit(1);
}

void
pxglossary(const char *project, const char *glos)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);
  v = CGI_add_var(v, "glos", glos);

  pxvl(v);
}

/* in P4, /rimanum/sux/x00102342 gets the pager version of the
   article; add ?form=html for the html or ?form=xml for XML;
   /rimanum/sux/x00102342/(html|xml) also work */
void
pxglossary_article(const char *project, const char *glos, const char *gart, const char *form)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);
  v = CGI_add_var(v, "glos", glos);
  v = CGI_add_var(v, "item", gart);
  if (form)
    v = CGI_add_var(v, "form", form);
  pxvl(v);
}

void
pxurlitem(const char *item, const char *replace)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);
  v = CGI_add_var(v, "u_item", item); /* fake name so px can catch /ITEM&item=ITEM */
#if 0
  /* px handles proxy now */
  v = CGI_add_var(v, "u_replace", replace);
#endif
  
  pxvl(v);
}

void
pxlist(const char *project, const char *list)
{
  CGI_varlist *v = NULL;

  v = CGI_get_query(v);
  if (!CGI_lookup(v, "list"))
    v = CGI_add_var(v, "list", list);
  pxvl(v);
}

void
px(const char *project)
{
  if (query_string)
    setenv("QUERY_STRING", query_string, 1);

  CGI_varlist *v = NULL;  
  v = CGI_get_query(v);
  v = CGI_get_post(v, NULL);

  pxvl(v);
}
