<?xml version='1.0'?>
<xsl:stylesheet version="1.0" 
		xmlns:g="http://oracc.org/ns/gdl/1.0"
		xmlns:n="http://oracc.org/ns/note/1.0"
		xmlns:x="http://oracc.org/ns/xtf/1.0"
		xmlns:xcl="http://oracc.org/ns/xcl/1.0"
		xmlns:xff="http://oracc.org/ns/xff/1.0"
		xmlns:lex="http://oracc.org/ns/lex/1.0"
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		exclude-result-prefixes="xcl xff">

<xsl:variable name="oid-doc" select="'@@ORACC_BUILDS@@/oid/oid.xml'"/>
<xsl:key name="oid" match="oid" use="@key"/>

<xsl:template match="/">
  <lex:text>
    <xsl:apply-templates select=".//xcl:c[@type='sentence']"/>
  </lex:text>
</xsl:template>

<xsl:template match="xcl:c[@type='sentence']">
  <xsl:choose>
    <xsl:when test="xcl:d[@type='field-start']">
      <xsl:if test="xcl:d[@subtype='wp']|xcl:d[@subtype='sv']">
	<xsl:variable name="sign">
	  <!-- need to descend in all of these xcl:l selectors because of potential for c:phr children of c:sentence -->
	  <xsl:value-of select=".//xcl:l[@ftype='sg'][1]/xff:f/@form"/>
	</xsl:variable>
	<xsl:variable name="read">
	  <xsl:for-each select=".//xcl:l[@ftype='sv']">
	    <xsl:if test="count(id(@ref)//g:v[not(@g:status='implied')>0])">
	      <xsl:value-of select="xff:f/@form"/>
	      <xsl:text> </xsl:text>
	    </xsl:if>
	  </xsl:for-each>
	</xsl:variable>
	<lex:data>
	  <xsl:call-template name="lex-data-meta"/>
	  <xsl:if test="string-length($sign)">
	    <xsl:attribute name="sign">
	      <xsl:value-of select="$sign"/>
	    </xsl:attribute>
	    <xsl:attribute name="sref">
	      <xsl:value-of select=".//xcl:l[@ftype='sg'][1]/@ref"/>
	    </xsl:attribute>
	  </xsl:if>
	  <xsl:attribute name="read">
	    <xsl:value-of select="normalize-space($read)"/>
	  </xsl:attribute>
	  <xsl:attribute name="spel">
	    <xsl:value-of select=".//xcl:l[@ftype='pr'][1]/xff:f/@form"/>
	  </xsl:attribute>
	  <xsl:call-template name="get-words">
	    <xsl:with-param name="type" select="'sv'"/>
	  </xsl:call-template>
	  <xsl:call-template name="get-words">
	    <xsl:with-param name="type" select="'wp'"/>
	  </xsl:call-template>
	  <xsl:call-template name="get-words">
	    <xsl:with-param name="type" select="'eq'"/>
	  </xsl:call-template>
	</lex:data>
      </xsl:if>
    </xsl:when>
    <xsl:otherwise>
      <xsl:for-each select="xcl:d[@type='line-start']">
	<xsl:call-template name="get-words-l">
	  <xsl:with-param name="ref" select="@ref"/>
	</xsl:call-template>
      </xsl:for-each>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template name="get-words">
  <xsl:param name="type"/>
  <xsl:for-each select="xcl:d[@type='field-start'][@subtype=$type]">
    <xsl:call-template name="get-words-one">
      <xsl:with-param name="type" select="$type"/>
      <xsl:with-param name="nth" select="position()"/>
    </xsl:call-template>
  </xsl:for-each>
</xsl:template>

<xsl:template name="get-words-one">
  <xsl:param name="type"/>
  <xsl:param name="nth"/>
  <!--
      <xsl:message>type=<xsl:value-of select="$type"
      />; nth=<xsl:value-of select="$nth"/></xsl:message> -->
  <xsl:variable name="f-start">
    <xsl:for-each select="../xcl:d[@type='field-start'][@subtype=$type][$nth]">
      <xsl:value-of select="count(preceding-sibling::*)+1"/>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="f-top" select="count(../*)+1"/>
  <xsl:variable name="f-end">
    <xsl:choose>
      <xsl:when test="../xcl:d[@type='field-end'][@subtype=$type][$nth]">
	<xsl:for-each select="../xcl:d[@type='field-end'][@subtype=$type][$nth]">
	  <xsl:value-of select="count(preceding-sibling::*)+1"/>
	</xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$f-top"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <!--
      <xsl:message><xsl:value-of select="$type"
      /> start=<xsl:value-of select="$f-start"
      />; end=<xsl:value-of select="$f-end"/></xsl:message> -->

  <!-- FIXME: this creates empty lex:wp elements for nonw nodes -->
  <xsl:if test="$f-start > 0">
    <xsl:element name="lex:{$type}">
      <xsl:for-each select="../*[position()>$f-start and position()&lt;$f-end]">
	<xsl:call-template name="lex-word"/>
      </xsl:for-each>
    </xsl:element>
  </xsl:if>
</xsl:template>

<xsl:template name="get-words-l">
  <xsl:param name="ref"/>
  <xsl:variable name="l-start">
    <xsl:for-each select="../xcl:d[@type='line-start'][@ref=$ref]">
      <xsl:value-of select="count(preceding-sibling::*)+1"/>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="l-top" select="count(../*)+1"/>
  <xsl:variable name="l-end">
    <xsl:for-each select="../xcl:d[@type='line-start'][@ref=$ref]">
      <xsl:choose>
	<xsl:when test="following-sibling::*[@type='line-start'][1]">
	  <xsl:for-each select="following-sibling::*[@type='line-start'][1]">
	    <xsl:value-of select="count(preceding-sibling::*)+1"/>
	  </xsl:for-each>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:value-of select="$l-top"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <!--
      <xsl:message><xsl:value-of select="concat('line@',$ref)"
      /> start=<xsl:value-of select="$l-start"
      />; end=<xsl:value-of select="$l-end"/></xsl:message>-->
  <lex:data>
    <xsl:for-each select="ancestor::xcl:c[@type='sentence'][1]">
      <xsl:call-template name="lex-data-meta"/>
    </xsl:for-each>
    <lex:wp>
      <xsl:for-each select="../*[position()>$l-start and position()&lt;$l-end]">
	<xsl:if test="self::xcl:l">
	  <xsl:call-template name="lex-word"/>
	</xsl:if>
      </xsl:for-each>
    </lex:wp>
  </lex:data>
</xsl:template>

<xsl:template name="lex-word">
  <xsl:if test="self::xcl:l">
    <lex:word>
      <xsl:attribute name="wref"><xsl:value-of select="@ref"/></xsl:attribute>
      <xsl:attribute name="form"><xsl:value-of select="xff:f/@form"/></xsl:attribute>
      <xsl:attribute name="lang"><xsl:value-of select="xff:f/@xml:lang"/></xsl:attribute>
      <xsl:if test="string-length(xff:f/@cf)>0">
	<xsl:variable name="cfgw"><xsl:value-of select="concat(xff:f/@cf,'[',xff:f/@gw,']',xff:f/@pos)"/></xsl:variable>
	<xsl:attribute name="cfgw"><xsl:value-of select="$cfgw"/></xsl:attribute>
	<xsl:variable name="lcfgw">
	  <xsl:choose>
	    <xsl:when test="contains(xff:f/@xml:lang,'-')">
	      <xsl:value-of select="concat('%',substring-before(xff:f/@xml:lang,'-'),':',$cfgw)"/>
	    </xsl:when>
	    <xsl:otherwise>
	      <xsl:value-of select="concat('%',xff:f/@xml:lang,':',$cfgw)"/>
	    </xsl:otherwise>
	  </xsl:choose>
	</xsl:variable>
	<xsl:variable name="oid">
	  <!-- <xsl:message>looking for <xsl:value-of select="$lcfgw"/> in <xsl:value-of select="$oid-doc"/></xsl:message> -->
	  <xsl:for-each select="document($oid-doc)">
	    <xsl:value-of select="key('oid',$lcfgw)/@id"/>
	  </xsl:for-each>
	</xsl:variable>
	<xsl:if test="string-length($oid)>0">
	  <xsl:attribute name="oid"><xsl:value-of select="$oid"/></xsl:attribute>
	</xsl:if>
      </xsl:if>
      <xsl:if test="xff:f/@base">
	<xsl:attribute name="base"><xsl:value-of select="xff:f/@base"/></xsl:attribute>
      </xsl:if>
      <xsl:if test="xff:f/@norm">
	<xsl:attribute name="norm"><xsl:value-of select="xff:f/@norm"/></xsl:attribute>
      </xsl:if>
      <xsl:if test="xff:f/@sense">
	<xsl:attribute name="sense"><xsl:value-of select="xff:f/@sense"/></xsl:attribute>
      </xsl:if>
      <xsl:for-each select="id(@ref)">
	<xsl:apply-templates mode="gdl" select="."/>
      </xsl:for-each>
    </lex:word>
  </xsl:if>
</xsl:template>

<xsl:template name="lex-data-meta">
  <xsl:copy-of select="/*/@project"/>
  <xsl:attribute name="id_text">
    <xsl:value-of select="/*/@xml:id"/>
  </xsl:attribute>
  <xsl:copy-of select="/*/@n"/>
  <xsl:copy-of select="@xml:id"/>
  <xsl:copy-of select="@label"/>
</xsl:template>

<xsl:template match="*" mode="gdl">
  <xsl:copy>
    <xsl:copy-of select="@*[not(name()='xml:id')]"/>
    <xsl:apply-templates mode="gdl"/>
  </xsl:copy>
</xsl:template>

</xsl:stylesheet>
